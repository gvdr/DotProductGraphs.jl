var documenterSearchIndex = {"docs":
[{"location":"man/Functions/#The-DotProductGraphs-functions","page":"The DotProductGraphs functions","title":"The DotProductGraphs functions","text":"","category":"section"},{"location":"man/Functions/","page":"The DotProductGraphs functions","title":"The DotProductGraphs functions","text":" DotProductGraphs\n ```\n\n## Module Index\n","category":"page"},{"location":"man/Functions/#DotProductGraphs","page":"The DotProductGraphs functions","title":"DotProductGraphs","text":"DotProductGraphs\n\nA Julia package for Random Dot Product Graphs.\n\n\n\n\n\n","category":"module"},{"location":"man/Functions/","page":"The DotProductGraphs functions","title":"The DotProductGraphs functions","text":"@index Modules = [DotProductGraphs] Order   = [:constant, :type, :function, :macro]","category":"page"},{"location":"man/Functions/","page":"The DotProductGraphs functions","title":"The DotProductGraphs functions","text":"## Detailed API\n","category":"page"},{"location":"man/Functions/","page":"The DotProductGraphs functions","title":"The DotProductGraphs functions","text":"@autodocs Modules = [DotProductGraphs] Order   = [:constant, :type, :function, :macro] ```","category":"page"},{"location":"#DotProductGraphs.jl","page":"Home","title":"DotProductGraphs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Chek it out on DotProductGraphs.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: codecov.io) (Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia Package to work with Random Dot Product Graphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It should cover all things RDPG, from SVD embeddings of networks, to more advanced functionalities such as omniembeddings, procrustes alignments, and so on.","category":"page"},{"location":"#Functioning","page":"Home","title":"Functioning","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For now, you can retrieve an embedding of a given size:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# we build a random, silly 1,0 matrix A\n# and think of it as a Graph adjacency matrix\nA = rand(Bool,100,100)\n\n# we build a pair of 4 dimensional embeddings\nLeft_embedding, Right_embedding = svd_embedding(A,4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"And produce a matrix of interaction probability by dot product:","category":"page"},{"location":"","page":"Home","title":"Home","text":"P = dot_product(Left_embedding, Right_embedding)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Details in Functions","category":"page"},{"location":"#TODO","page":"Home","title":"TODO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[ ] Document all the things!\n[ ] Unit Tests All The Things!\n[x] Include basic embedding and dot product capability relying on LinearAlgebra\n[ ] Allow user to choose the svd \"engine\" (e.g., KrylovKit.JL, Arpack.JL, LowRankApprox.jl, ...) by defining a unified interface\n[ ] Implement Omniembedding functions\n[x] Automatic block matrix building\n[ ] Embedding extraction\n[ ] Implement Procrustes Allignment\n[ ] orthogonal\n[x] Partial: Just getting the min distances (cheating, as we compute the full rotation matrix)\n[x] Full: Obtaining rotation matrix\n[ ] allowing translations\n[ ] seedless\n[ ] Elbow and principled method to choose dimensionality\n[ ] Register package.\n[ ] Think how to integrate with Graphs.jl and EcologicalNetworks.jl","category":"page"},{"location":"#Acknowledgement","page":"Home","title":"Acknowledgement","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DotProductGraphs is heavily inspired by graspologic, but it focus on being light (focussing on a narrower set of techniques, as we complement wider ecosystems as Graphs.jl and EcologicalNetworks.jl) and squeezing out performance from being written in Julia.","category":"page"}]
}
